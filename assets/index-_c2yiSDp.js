import{r as x,j as p}from"./index-7JCrVMyd.js";import{T as g}from"./ToolTextInput-pMJPolT7.js";import{T}from"./ToolTextResult-BPpE0Rrg.js";import{R as y}from"./RadioWithTextField-DpQpVQSL.js";import{T as C}from"./ToolContent-DrkA_-Xz.js";import"./ContentPaste-CJSvfBhK.js";import"./InputFooter-Cia2zmGJ.js";import"./TextField-DeGHHacn.js";import"./ResultFooter-DAeFmDVK.js";import"./TextFieldWithDesc-D98LnRRi.js";import"./SimpleRadio-BbIGpl0h.js";import"./Radio-Clz2uSlr.js";import"./SwitchBase-CZaFkbti.js";function f(o,e,t){return e>=t?!0:o[e]!==o[t]?!1:f(o,e+1,t-1)}function R(o){const e=[];for(const t of o){const r=f(t,0,t.length-1);e.push(r)}return e}function b(o,e,t){if(!e)return"";let r;switch(o){case"symbol":r=e.split(t);break;case"regex":r=e.split(new RegExp(t));break}return r=r.map(a=>a.trim()),R(r).map(a=>a.toString()).join(t)}const m={splitOperatorType:"symbol",symbolValue:" ",regexValue:"\\s+"},k=[{title:"Use a Symbol for Splitting",description:"Character that will be used to split text into parts for palindrome checking.",type:"symbol"},{title:"Use a Regex for Splitting",type:"regex",description:"Regular expression that will be used to split text into parts for palindrome checking."}],V=[{title:"Check for Word Palindromes",description:'Checks if each word in the text is a palindrome. Returns "true" for palindromes and "false" for non-palindromes.',sampleText:"radar level hello anna",sampleResult:"true true false true",sampleOptions:{...m,symbolValue:" "}},{title:"Check CSV Words",description:"Checks palindrome status for comma-separated words.",sampleText:"mom,dad,wow,test",sampleResult:"true true true false",sampleOptions:{...m,symbolValue:","}},{title:"Check with Regular Expression",description:"Use a regular expression to split text and check for palindromes.",sampleText:"level:madam;noon|test",sampleResult:"true true true false",sampleOptions:{...m,splitOperatorType:"regex",regexValue:"[:|;]|\\|"}}];function L({title:o}){const[e,t]=x.useState(""),[r,c]=x.useState(""),a=(l,i)=>{const{splitOperatorType:n,symbolValue:u,regexValue:s}=l;c(b(n,i,n==="symbol"?u:s))},h=({values:l,updateField:i})=>[{title:"Splitting options",component:k.map(({title:n,description:u,type:s})=>p.jsx(y,{checked:s===l.splitOperatorType,title:n,fieldName:"splitOperatorType",description:u,value:l[`${s}Value`],onRadioClick:()=>i("splitOperatorType",s),onTextChange:d=>i(`${s}Value`,d)},s))}];return p.jsx(C,{title:o,initialValues:m,getGroups:h,compute:a,input:e,setInput:t,inputComponent:p.jsx(g,{value:e,onChange:t}),resultComponent:p.jsx(T,{title:"Palindrome results",value:r}),exampleCards:V})}export{L as default};
