import{r as u,j as t,B as g}from"./index-7JCrVMyd.js";import{T as f}from"./ToolContent-DrkA_-Xz.js";import{T as x}from"./ToolTextInput-pMJPolT7.js";import{T}from"./ToolTextResult-BPpE0Rrg.js";import{T as h}from"./TextFieldWithDesc-D98LnRRi.js";import{S as l}from"./SimpleRadio-BbIGpl0h.js";import{c as y,a as d,d as j}from"./index.esm-Cob4-rpC.js";import"./TextField-DeGHHacn.js";import"./ContentPaste-CJSvfBhK.js";import"./InputFooter-Cia2zmGJ.js";import"./ResultFooter-DAeFmDVK.js";import"./Radio-Clz2uSlr.js";import"./SwitchBase-CZaFkbti.js";function S(m,n,a,c,p,s){let i,e;switch(m){case"symbol":i=n.split(a);break;case"regex":i=n.split(new RegExp(a));break}if(s!==void 0){if(s<0)throw new Error("Length value must be a positive number.");return e=p?i.slice(0,s):i.slice(i.length-s,i.length),e.join(c)}throw new Error("Length value isn't a value number.")}const b={splitOperatorType:"symbol",splitSeparator:",",joinSeparator:",",end:!0,length:"3"},w=y({splitSeparator:d().required("The separator is required"),joinSeparator:d().required("The join separator is required"),length:j().typeError("Length must be a number").min(0,"Length must be a positive number").required("Length is required")}),O=[{title:"Keep first 3 items in a list",description:"This example shows how to keep only the first 3 items in a comma-separated list.",sampleText:"apple, pineapple, lemon, orange, mango",sampleResult:"apple,pineapple,lemon",sampleOptions:{splitOperatorType:"symbol",splitSeparator:", ",joinSeparator:",",end:!0,length:"3"}},{title:"Keep last 2 items in a list",description:"This example shows how to keep only the last 2 items in a comma-separated list.",sampleText:"apple, pineapple, lemon, orange, mango",sampleResult:"orange,mango",sampleOptions:{splitOperatorType:"symbol",splitSeparator:", ",joinSeparator:",",end:!1,length:"2"}},{title:"Truncate a list with custom separators",description:"This example shows how to truncate a list with custom separators.",sampleText:"apple | pineapple | lemon | orange | mango",sampleResult:"apple - pineapple - lemon",sampleOptions:{splitOperatorType:"symbol",splitSeparator:" | ",joinSeparator:" - ",end:!0,length:"3"}}];function D({title:m}){const[n,a]=u.useState(""),[c,p]=u.useState(""),s=(e,r)=>{if(r)try{const o=parseInt(e.length,10);p(S(e.splitOperatorType,r,e.splitSeparator,e.joinSeparator,e.end,o))}catch(o){o instanceof Error?p(`Error: ${o.message}`):p("An unknown error occurred")}},i=({values:e,updateField:r})=>[{title:"Split Options",component:t.jsxs(g,{children:[t.jsx(l,{onClick:()=>r("splitOperatorType","symbol"),checked:e.splitOperatorType==="symbol",title:"Split by Symbol"}),t.jsx(l,{onClick:()=>r("splitOperatorType","regex"),checked:e.splitOperatorType==="regex",title:"Split by Regular Expression"}),t.jsx(h,{value:e.splitSeparator,onOwnChange:o=>r("splitSeparator",o),description:"Separator to split the list"}),t.jsx(h,{value:e.joinSeparator,onOwnChange:o=>r("joinSeparator",o),description:"Separator to join the truncated list"})]})},{title:"Truncation Options",component:t.jsxs(g,{children:[t.jsx(h,{value:e.length,onOwnChange:o=>r("length",o),description:"Number of items to keep",type:"number"}),t.jsx(l,{onClick:()=>r("end",!0),checked:e.end,title:"Keep items from the beginning"}),t.jsx(l,{onClick:()=>r("end",!1),checked:!e.end,title:"Keep items from the end"})]})}];return t.jsx(f,{title:m,inputComponent:t.jsx(x,{title:"Input List",value:n,onChange:a}),resultComponent:t.jsx(T,{title:"Truncated List",value:c}),initialValues:b,getGroups:i,validationSchema:w,toolInfo:{title:"List Truncation",description:"This tool allows you to truncate a list to a specific number of items. You can choose to keep items from the beginning or the end of the list, and specify custom separators for splitting and joining. It's useful for limiting the size of lists, creating previews, or extracting specific portions of data."},exampleCards:O,input:n,setInput:a,compute:s})}export{D as default};
