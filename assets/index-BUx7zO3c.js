import{z as E,r as f,j as o}from"./index-7JCrVMyd.js";import{T as b}from"./ToolTextInput-pMJPolT7.js";import{T as v}from"./ToolTextResult-BPpE0Rrg.js";import{T as g}from"./TextFieldWithDesc-D98LnRRi.js";import{C as d}from"./CheckboxWithDesc-Q6HObWmX.js";import{T as w}from"./ToolContent-DrkA_-Xz.js";import"./ContentPaste-CJSvfBhK.js";import"./InputFooter-Cia2zmGJ.js";import"./TextField-DeGHHacn.js";import"./ResultFooter-DAeFmDVK.js";import"./FormControlLabel-Bkvpm43S.js";import"./Checkbox-Sy-FfrtZ.js";import"./SwitchBase-CZaFkbti.js";function j(a,i,s,p,l){if(!a)return"";if(i<=0)throw new Error("Start index must be greater than zero.");if(s<0)throw new Error("Length value must be greater than or equal to zero.");if(s===0)return"";let c,n=[];const r=(t,e,u)=>{const h=e-1+u;return e-1>=t.length?"":t.substring(e-1,Math.min(h,t.length))};if(!p)n.push(r(a,i,s));else{c=a.split(`
`);for(const t of c)n.push(r(t,i,s))}return n=l?n.map(t=>E(t)):n,n.join(`
`)}const m={start:"1",length:"5",multiLine:!1,reverse:!1},C=[{title:"Extract First 5 Characters",description:"This example extracts the first 5 characters from the text.",sampleText:"The quick brown fox jumps over the lazy dog.",sampleResult:"The q",sampleOptions:{...m,start:"1",length:"5"}},{title:"Extract Words from the Middle",description:"Extract a substring starting from position 11 with a length of 10 characters.",sampleText:"The quick brown fox jumps over the lazy dog.",sampleResult:"brown fox",sampleOptions:{...m,start:"11",length:"10"}},{title:"Multi-line Extraction with Reversal",description:"Extract characters 1-3 from each line and reverse them.",sampleText:`First line
Second line
Third line`,sampleResult:`riF
ceS
ihT`,sampleOptions:{...m,start:"1",length:"3",multiLine:!0,reverse:!0}}];function F({title:a}){const[i,s]=f.useState(""),[p,l]=f.useState(""),c=(r,t)=>{const{start:e,length:u,multiLine:h,reverse:T}=r;try{l(j(t,parseInt(e,10),parseInt(u,10),h,T))}catch(x){x instanceof Error?l(`Error: ${x.message}`):l("An unknown error occurred")}},n=({values:r,updateField:t})=>[{title:"Extraction options",component:[o.jsx(g,{value:r.start,onOwnChange:e=>t("start",e),description:"Start position (1-based index)",type:"number"},"start"),o.jsx(g,{value:r.length,onOwnChange:e=>t("length",e),description:"Number of characters to extract",type:"number"},"length"),o.jsx(d,{checked:r.multiLine,title:"Process multi-line text",description:"Extract from each line independently",onChange:e=>t("multiLine",e)},"multiLine"),o.jsx(d,{checked:r.reverse,title:"Reverse output",description:"Reverse the extracted substring",onChange:e=>t("reverse",e)},"reverse")]}];return o.jsx(w,{title:a,initialValues:m,getGroups:n,compute:c,input:i,setInput:s,inputComponent:o.jsx(b,{title:"Input text",value:i,onChange:s}),resultComponent:o.jsx(v,{title:"Extracted text",value:p}),exampleCards:C})}export{F as default};
