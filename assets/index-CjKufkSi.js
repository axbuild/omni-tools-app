import{i as F,k as I,j as r,r as g,B as m,T as y}from"./index-7JCrVMyd.js";import{T as C}from"./ToolContent-DrkA_-Xz.js";import{T as E}from"./ToolFileResult-Div6pbTm.js";import{I as b}from"./ContentPaste-CJSvfBhK.js";import{I as R}from"./InputFooter-Cia2zmGJ.js";import{f as _,F as $}from"./index-on_GoYzL.js";import"./TextField-DeGHHacn.js";import"./grey-pattern-DMflWW5d.js";import"./ResultFooter-DAeFmDVK.js";var x={},T=I;Object.defineProperty(x,"__esModule",{value:!0});var v=x.default=void 0,V=T(F()),k=r;v=x.default=(0,V.default)((0,k.jsx)("path",{d:"M14 2H6.01c-1.1 0-2 .89-2 2L4 20c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V8zm-1 7V3.5L18.5 9zm1 5 2-1.06v4.12L14 16v1c0 .55-.45 1-1 1H9c-.55 0-1-.45-1-1v-4c0-.55.45-1 1-1h4c.55 0 1 .45 1 1z"}),"VideoFile");function L({value:o,onChange:f,accept:n,title:s,type:a}){console.log("ToolMultipleVideoInput rendering with value:",o);const i=g.useRef(null),c=e=>{const t=e.target.files;console.log("File change event:",t),t&&f([...o,...Array.from(t).map(l=>({file:l,order:o.length}))])},p=()=>{var e;console.log("Import clicked"),(e=i.current)==null||e.click()};function u(){console.log("Clear clicked"),f([])}function d(e){return e.length>15?e.slice(0,15)+"...":e}return r.jsxs(m,{children:[r.jsx(b,{title:s||"Input "+a.charAt(0).toUpperCase()+a.slice(1)}),r.jsx(m,{sx:{width:"100%",height:"300px",border:o!=null&&o.length?0:1,borderRadius:2,boxShadow:"5",bgcolor:"background.paper",position:"relative"},children:r.jsx(m,{width:"100%",height:"100%",sx:{overflow:"auto",display:"flex",alignItems:"center",justifyContent:"center",flexWrap:"wrap",position:"relative"},children:o!=null&&o.length?o.map((e,t)=>r.jsxs(m,{sx:{margin:1,display:"flex",alignItems:"center",justifyContent:"space-between",width:"200px",border:1,borderRadius:1,padding:1},children:[r.jsxs(m,{sx:{display:"flex",alignItems:"center"},children:[r.jsx(v,{}),r.jsx(y,{sx:{marginLeft:1},children:d(e.file.name)})]}),r.jsx(m,{sx:{cursor:"pointer"},onClick:()=>{const l=o.filter((w,h)=>h!==t);f(l)},children:"âœ–"})]},t)):r.jsx(y,{variant:"body2",color:"text.secondary",children:"No files selected"})})}),r.jsx(R,{handleImport:p,handleClear:u}),r.jsx("input",{ref:i,style:{display:"none"},type:"file",accept:n.join(","),onChange:c,multiple:!0})]})}async function S(o,f){if(!Array.isArray(o)||o.length<2)throw new Error("Please provide at least two video files to merge.");const n=new $,s=[],a="output.mp4";try{n.loaded||await n.load({wasmURL:"https://cdn.jsdelivr.net/npm/@ffmpeg/core@0.12.9/dist/esm/ffmpeg-core.wasm",workerURL:"https://cdn.jsdelivr.net/npm/@ffmpeg/core@0.12.9/dist/esm/ffmpeg-core.worker.js"});for(let e=0;e<o.length;e++){const t=`input${e}.mp4`;s.push(t);try{const l=await _(o[e]);await n.writeFile(t,l),console.log(`Successfully wrote ${t}`)}catch(l){throw console.error(`Failed to write ${t}:`,l),new Error(`Failed to process input file ${e+1}: ${l}`)}}const i=s.map((e,t)=>`[${t}:v]`).join(" "),c=s.map((e,t)=>`[${t}:a]`).join(" "),p=`${i} ${c} concat=n=${o.length}:v=1:a=1 [v] [a]`,u=[];for(const e of s)u.push("-i",e);console.log("Starting FFmpeg processing..."),console.log("Filter complex:",p);try{console.log("Trying concat demuxer method...");const e=s.map(t=>`file '${t}'`).join(`
`);await n.writeFile("concat_list.txt",new TextEncoder().encode(e)),await n.exec(["-f","concat","-safe","0","-i","concat_list.txt","-c:v","libx264","-preset","ultrafast","-crf","30","-threads","0","-y",a]);try{const t=await n.readFile(a);t&&t.length>0&&console.log("Concat demuxer method succeeded")}catch{console.log("Concat demuxer method failed to produce output")}}catch(e){console.error("Concat demuxer method failed:",e)}let d;try{d=await n.readFile(a),console.log("Successfully read output file")}catch(e){throw console.error("Failed to read output file:",e),new Error("Failed to read merged video file")}if(!d||d.length===0)throw new Error("Output file is empty or corrupted");return new Blob([d],{type:"video/mp4"})}catch(i){throw console.error("Error merging videos:",i),i instanceof Error?i:new Error("Unknown error occurred during video merge")}finally{const i=[...s,a,"concat_list.txt"];for(const c of i)try{await n.deleteFile(c)}catch(p){console.warn(`Could not delete ${c}:`,p)}}}const j={};function O({title:o,longDescription:f}){const[n,s]=g.useState([]),[a,i]=g.useState(null),[c,p]=g.useState(!1),u=async(d,e)=>{if(!(!e||e.length<2)){p(!0);try{const t=e.map(h=>h.file),l=await S(t,j),w=new File([l],"merged-video.mp4",{type:"video/mp4"});i(w)}catch{i(null)}finally{p(!1)}}};return r.jsx(C,{title:o,input:n,inputComponent:r.jsx(L,{value:n,onChange:d=>{s(d)},accept:["video/*",".mp4",".avi",".mov",".mkv"],title:"Input Videos",type:"video"}),resultComponent:r.jsx(E,{value:a,title:c?"Merging Videos...":"Merged Video",loading:c,extension:"mp4"}),initialValues:j,getGroups:null,setInput:s,compute:u,toolInfo:{title:`What is a ${o}?`,description:f}})}export{O as default};
