import{r as g,j as o,B as u}from"./index-7JCrVMyd.js";import{T as j}from"./ToolTextInput-pMJPolT7.js";import{T as R}from"./ToolTextResult-BPpE0Rrg.js";import{S as x}from"./SimpleRadio-BbIGpl0h.js";import{T as h}from"./TextFieldWithDesc-D98LnRRi.js";import{f as S}from"./number-8xlk3Zkp.js";import{T as w}from"./ToolContent-DrkA_-Xz.js";import"./ContentPaste-CJSvfBhK.js";import"./InputFooter-Cia2zmGJ.js";import"./TextField-DeGHHacn.js";import"./ResultFooter-DAeFmDVK.js";import"./Radio-Clz2uSlr.js";import"./SwitchBase-CZaFkbti.js";function T(r,a,l){const p=r.length,n=(a%p+p)%p;return l?r.slice(-n).concat(r.slice(0,-n)):r.slice(n).concat(r.slice(0,n))}function b(r,a,l,p,n,c){let t,i;switch(r){case"symbol":t=a.split(l);break;case"regex":t=a.split(new RegExp(l));break}if(c!==void 0){if(c<=0)throw new Error("Rotation step must be greater than zero.");return i=T(t,c,n),i.join(p)}throw new Error("Rotation step contains non-digits.")}const C={splitOperatorType:"symbol",input:"",splitSeparator:",",joinSeparator:",",right:!0,step:1},y=[{title:"Use a Symbol for Splitting",description:"Delimit input list items with a character.",type:"symbol"},{title:"Use a Regex for Splitting",type:"regex",description:"Delimit input list items with a regular expression."}],O=[{title:"Rotate forward",description:"Rotate list items to the right. (Down if a vertical column list.)",value:!0},{title:"Rotate backward",description:"Rotate list items to the left. (Up if a vertical column list.)",value:!1}];function P({title:r}){const[a,l]=g.useState(""),[p,n]=g.useState(""),c=(t,i)=>{const{splitOperatorType:e,splitSeparator:m,joinSeparator:s,right:f,step:d}=t;n(b(e,i,m,s,f,d))};return o.jsx(w,{title:r,input:a,inputComponent:o.jsx(j,{title:"Input list",value:a,onChange:l}),resultComponent:o.jsx(R,{title:"Rotated list",value:p}),initialValues:C,getGroups:({values:t,updateField:i})=>[{title:"Item split mode",component:o.jsxs(u,{children:[y.map(({title:e,description:m,type:s})=>o.jsx(x,{onClick:()=>i("splitOperatorType",s),title:e,description:m,checked:t.splitOperatorType===s},s)),o.jsx(h,{description:"Set a delimiting symbol or regular expression.",value:t.splitSeparator,onOwnChange:e=>i("splitSeparator",e)})]})},{title:"Rotation Direction and Count",component:o.jsxs(u,{children:[O.map(({title:e,description:m,value:s})=>o.jsx(x,{onClick:()=>i("right",s),title:e,description:m,checked:t.right===s},`${s}`)),o.jsx(h,{description:"Number of items to rotate",value:t.step,onOwnChange:e=>i("step",S(e,1))})]})},{title:"Rotated List Joining Symbol",component:o.jsx(u,{children:o.jsx(h,{value:t.joinSeparator,onOwnChange:e=>i("joinSeparator",e),description:"Enter the character that goes between items in the rotated list."})})}],compute:c,setInput:l})}export{P as default};
